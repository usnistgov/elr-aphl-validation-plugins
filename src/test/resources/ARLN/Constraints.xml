<ConformanceContext xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/Jungyubw/NIST_healthcare_hl7_v2_profile_schema/master/Schema/NIST%20Validation%20Schema/ConformanceContext.xsd" UUID="57450d0dd4c6f57e694d1e88">
	<MetaData Name="Main IG-APHL-08132019" OrgName="APHL" Version="No Version Info" Date="No Date Info" />
	<Predicates>
		<Datatype>
			<ByID ID="CNN_ELR">
				<Predicate ID="CP_10[1]_0" Target="10[1]" TrueUsage="R" FalseUsage="X">
					<Description>If CNN.1 (ID Number) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="1[1]" />
							<Presence Path="1[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_11[1]_0" Target="11[1]" TrueUsage="R" FalseUsage="X">
					<Description>If CNN.10 (Assigning Authority  - Universal ID) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="10[1]" />
							<Presence Path="10[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="CWE_OBX5">
				<Predicate ID="CP_6[1]_0" Target="6[1]" TrueUsage="R" FalseUsage="X">
					<Description>If CWE.4 (Alternate Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="4[1]" />
							<Presence Path="4[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="CWE_ELR">
				<Predicate ID="CP_2[1]_0" Target="2[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If CWE.1 (Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="1[1]" />
							<Presence Path="1[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_3[1]_0" Target="3[1]" TrueUsage="R" FalseUsage="X">
					<Description>If CWE.1 (Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="1[1]" />
							<Presence Path="1[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_5[1]_0" Target="5[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If CWE.4 (Alternate Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="4[1]" />
							<Presence Path="4[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_6[1]_0" Target="6[1]" TrueUsage="R" FalseUsage="X">
					<Description>If CWE.4 (Alternate Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="4[1]" />
							<Presence Path="4[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="undefined-9" Target="9[1]" TrueUsage="R" FalseUsage="RE">
					<Description>[If CWE.1 (Identifier) is not valued] AND [If CWE.4 (Alternate Identifier) is not valued]</Description>
					<Condition>
						<AND>
							<NOT>
								<AND>
									<Presence Path="1[1]" />
									<Presence Path="1[1]" />
								</AND>
							</NOT>
							<NOT>
								<AND>
									<Presence Path="4[1]" />
									<Presence Path="4[1]" />
								</AND>
							</NOT>
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="XTN_ELR">
				<Predicate ID="CP_5[1]_0" Target="5[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If XTN.7 (Local Number) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="7[1]" />
							<Presence Path="7[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_6[1]_0" Target="6[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If XTN.7 (Local Number) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="7[1]" />
							<Presence Path="7[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_7[1]_0" Target="7[1]" TrueUsage="R" FalseUsage="X">
					<Description>If XTN.4 (Email Address) is not valued</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="4[1]" />
								<Presence Path="4[1]" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
				<Predicate ID="CP_8[1]_0" Target="8[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If XTN.7 (Local Number) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="7[1]" />
							<Presence Path="7[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_4[1]_0" Target="4[1]" TrueUsage="R" FalseUsage="X">
					<Description>If XTN.7 (Local Number) is not valued</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="7[1]" />
								<Presence Path="7[1]" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="XCN_ELR">
				<Predicate ID="CP_9[1]_0" Target="9[1]" TrueUsage="R" FalseUsage="X">
					<Description>If XCN.1 (ID Number) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="1[1]" />
							<Presence Path="1[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_13[1]_0" Target="13[1]" TrueUsage="R" FalseUsage="X">
					<Description>If XCN.1 (ID Number) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="1[1]" />
							<Presence Path="1[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="XON_ELR">
				<Predicate ID="CP_1[1]_0" Target="1[1]" TrueUsage="R" FalseUsage="RE">
					<Description>If XON.10 (Organization Identifier) is not valued</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="10[1]" />
								<Presence Path="10[1]" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
				<Predicate ID="CP_6[1]_0" Target="6[1]" TrueUsage="R" FalseUsage="X">
					<Description>If XON.10 (Organization Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="10[1]" />
							<Presence Path="10[1]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_7[1]_0" Target="7[1]" TrueUsage="R" FalseUsage="X">
					<Description>If XON.10 (Organization Identifier) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="10[1]" />
							<Presence Path="10[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
		</Datatype>
		<Segment>
			<ByID ID="NK1_ELR">
				<Predicate ID="CP_2[1]_0" Target="2[1]" TrueUsage="R" FalseUsage="X">
					<Description>If NK1-13[*] is not valued</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="13[*]" />
								<Presence Path="13[*]" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
				<Predicate ID="CP_30[1]_0" Target="30[1]" TrueUsage="R" FalseUsage="X">
					<Description>If NK1-13[*] is valued</Description>
					<Condition>
						<AND>
							<Presence Path="13[*]" />
							<Presence Path="13[*]" />
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_13[1]_0" Target="13[1]" TrueUsage="R" FalseUsage="X">
					<Description>If NK1-2[*] is not valued</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="2[*]" />
								<Presence Path="2[*]" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="PID_ELR">
				<Predicate ID="CP_34[1]_0" Target="34[1]" TrueUsage="R" FalseUsage="O">
					<Description>If PID-33 is valued</Description>
					<Condition>
						<AND>
							<Presence Path="33[1]" />
							<Presence Path="33[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="OBX_ELR">
				<Predicate ID="CP_5[1]_0" Target="5[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If the value of OBX-11 is not 'X'.</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="11[1]" />
								<PlainText Path="11[1]" Text="X" IgnoreCase="false" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
				<Predicate ID="undefined-6" Target="6[1]" TrueUsage="R" FalseUsage="X">
					<Description>[[If the value of OBX-2 is 'NM'.] OR [If the value of OBX-2 is 'SN'.]] AND [If the value of OBX-11 is not 'X'.]</Description>
					<Condition>
						<AND>
							<OR>
								<AND>
									<Presence Path="2[1]" />
									<PlainText Path="2[1]" Text="NM" IgnoreCase="false" />
								</AND>
								<AND>
									<Presence Path="2[1]" />
									<PlainText Path="2[1]" Text="SN" IgnoreCase="true" />
								</AND>
							</OR>
							<NOT>
								<AND>
									<Presence Path="11[1]" />
									<PlainText Path="11[1]" Text="X" IgnoreCase="true" />
								</AND>
							</NOT>
						</AND>
					</Condition>
				</Predicate>
				<Predicate ID="CP_8[1]_0" Target="8[1]" TrueUsage="RE" FalseUsage="X">
					<Description>If the value of OBX-11 is not 'X'.</Description>
					<Condition>
						<NOT>
							<AND>
								<Presence Path="11[1]" />
								<PlainText Path="11[1]" Text="X" IgnoreCase="true" />
							</AND>
						</NOT>
					</Condition>
				</Predicate>
				<Predicate ID="CP_2[1]_0" Target="2[1]" TrueUsage="R" FalseUsage="X">
					<Description>If OBX-5 is valued</Description>
					<Condition>
						<AND>
							<Presence Path="5[1]" />
							<Presence Path="5[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
		</Segment>
		<Group>
			<ByID ID="5d55ad6e84aeb5b33d97ed4e">
				<Predicate ID="CP_NOT Assigned_0" Target="2[1].8[1]" TrueUsage="R" FalseUsage="O">
					<Description>If SPECIMEN[*].SPM.17.2.1 (Time) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="9[*].1[1].17[1].2[1].1[1]" />
							<Presence Path="9[*].1[1].17[1].2[1].1[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="5d1a220684ae07947e946d3c">
				<Predicate ID="CP_NOT Assigned_0" Target="2[1].8[1]" TrueUsage="R" FalseUsage="O">
					<Description>If SPECIMEN[*].SPM.17.2.1 (Time) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="9[*].1[1].17[1].2[1].1[1]" />
							<Presence Path="9[*].1[1].17[1].2[1].1[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
			<ByID ID="5d55ad6e84aeb5b33d97e80a">
				<Predicate ID="CP_NOT Assigned_0" Target="2[1].8[1]" TrueUsage="R" FalseUsage="O">
					<Description>If SPECIMEN[*].SPM.17.2.1 (Time) is valued</Description>
					<Condition>
						<AND>
							<Presence Path="9[*].1[1].17[1].2[1].1[1]" />
							<Presence Path="9[*].1[1].17[1].2[1].1[1]" />
						</AND>
					</Condition>
				</Predicate>
			</ByID>
		</Group>
		<Message />
	</Predicates>
	<Constraints>
		<Datatype>
			<ByID ID="EI_ELR">
				<Constraint ID="ELR-005">
					<Description>The value of EI-4 (Universal ID Type) SHALL be 'ISO'.</Description>
					<Assertion>
						<PlainText Path="4[1]" Text="ISO" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-004">
					<Description>The value of EI-3 (Universal ID) SHALL be formatted with 'ISO-compliant OID'.</Description>
					<Assertion>
						<Format Path="3[1]" Regex="[0-2](\.(0|[1-9][0-9]*))*" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="CWE_ELR">
				<Constraint ID="ELR-069">
					<Description>IF [The value of CWE-3 (Name of Coding System) is 'LN'.] THEN [The value of CWE-1 (Identifier) SHALL be formatted with '^\d{4,5}[-]\d{1}$'.]</Description>
					<Assertion>
						<IMPLY>
							<AND>
								<Presence Path="3[1]" />
								<PlainText Path="3[1]" Text="LN" IgnoreCase="false" />
							</AND>
							<AND>
								<Presence Path="1[1]" />
								<Format Path="1[1]" Regex="^\d{4,5}[-]\d{1}$" />
							</AND>
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-070">
					<Description>IF [The value of CWE-6 (Name of Alternate Coding System) is 'LN'.] THEN [The value of CWE-4 (Alternate Identifier) SHALL be formatted with '^\d{4,5}[-]\d{1}$'.]</Description>
					<Assertion>
						<IMPLY>
							<AND>
								<Presence Path="6[1]" />
								<PlainText Path="6[1]" Text="LN" IgnoreCase="false" />
							</AND>
							<AND>
								<Presence Path="4[1]" />
								<Format Path="4[1]" Regex="^\d{4,5}[-]\d{1}$" />
							</AND>
						</IMPLY>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="CNN_ELR">
				<Constraint ID="ELR-002">
					<Description>The value of CNN-10 (Assigning Authority  - Universal ID) SHALL be formatted with 'ISO-compliant OID'.</Description>
					<Assertion>
						<Format Path="10[1]" Regex="[0-2](\.(0|[1-9][0-9]*))*" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-003">
					<Description>The value of CNN-11 (Assigning Authority  - Universal ID Type) SHALL be 'ISO'.</Description>
					<Assertion>
						<PlainText Path="11[1]" Text="ISO" IgnoreCase="false" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="DTM_ELR">
				<Constraint ID="DTM_ELR_Year_USAGE(R)" Target=".">
					<Description>Year usage is 'R'.</Description>
					<Assertion>
						<Format Path="." Regex="([0-9]{4})(((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?)?((\+|\-)[0-9]{4})?" />
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_Day_USAGE(C)" Target=".">
					<Description>Day usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Month) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_Hour_USAGE(C)" Target=".">
					<Description>Hour usage is 'C'.False Usage is 'X'. Predicate is 'If DD(Day) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_Minute_USAGE(C)" Target=".">
					<Description>Minute usage is 'C'.False Usage is 'X'. Predicate is 'If HH(Hour) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_Second_USAGE(C)" Target=".">
					<Description>Second usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Minute) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])(\.[0-9]{1,4})?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_1/10 second_USAGE(C)" Target=".">
					<Description>1/10 second usage is 'C'.False Usage is 'X'. Predicate is 'If SS(Second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9]([0-9]([0-9]([0-9])?)?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_1/100 second_USAGE(C)" Target=".">
					<Description>1/100 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/10 second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9]([0-9]([0-9])?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_1/1000 second_USAGE(C)" Target=".">
					<Description>1/1000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/100 second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9][0-9]([0-9])?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_ELR_1/10000 second_USAGE(C)" Target=".">
					<Description>1/10000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/1000 second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9][0-9][0-9]((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?([0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="DTM">
				<Constraint ID="DTM_Year_USAGE(R)" Target=".">
					<Description>Year usage is 'R'.</Description>
					<Assertion>
						<Format Path="." Regex="([0-9]{4})(((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?)?((\+|\-)[0-9]{4})?" />
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_Day_USAGE(C)" Target=".">
					<Description>Day usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Month) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_Hour_USAGE(C)" Target=".">
					<Description>Hour usage is 'C'.False Usage is 'X'. Predicate is 'If DD(Day) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_Minute_USAGE(C)" Target=".">
					<Description>Minute usage is 'C'.False Usage is 'X'. Predicate is 'If HH(Hour) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_Second_USAGE(C)" Target=".">
					<Description>Second usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Minute) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])(\.[0-9]{1,4})?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_1/10 second_USAGE(C)" Target=".">
					<Description>1/10 second usage is 'C'.False Usage is 'X'. Predicate is 'If SS(Second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9]([0-9]([0-9]([0-9])?)?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_1/100 second_USAGE(C)" Target=".">
					<Description>1/100 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/10 second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9]([0-9]([0-9])?)?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_1/1000 second_USAGE(C)" Target=".">
					<Description>1/1000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/100 second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9][0-9]([0-9])?((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="DTM_1/10000 second_USAGE(C)" Target=".">
					<Description>1/10000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/1000 second) is valued.'.</Description>
					<Assertion>
						<IMPLY>
							<NOT>
								<Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9][0-9][0-9]((\+|\-)[0-9]{4})?" />
							</NOT>
							<Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?([0-9])?((\+|\-)[0-9]{4})?" />
						</IMPLY>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="SN_ELR-08_09">
				<Constraint ID="ELR-009">
					<Description>EXIST[The value of SN-3 (Separator/Suffix) SHALL be '-'.][The value of SN-3 (Separator/Suffix) SHALL be '+'.][The value of SN-3 (Separator/Suffix) SHALL be '/'.][The value of SN-3 (Separator/Suffix) SHALL be '.'.][The value of SN-3 (Separator/Suffix) SHALL be ':'.]</Description>
					<Assertion>
						<EXIST>
							<PlainText Path="3[1]" Text="-" IgnoreCase="false" />
							<PlainText Path="3[1]" Text="+" IgnoreCase="false" />
							<PlainText Path="3[1]" Text="/" IgnoreCase="false" />
							<PlainText Path="3[1]" Text="." IgnoreCase="false" />
							<PlainText Path="3[1]" Text=":" IgnoreCase="false" />
						</EXIST>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="XAD_ELR">
				<Constraint ID="ELR-011">
					<Description>The value of XAD-5 (Zip or Postal Code) SHALL be formatted with '^\d{5}$|^\d{5}-\d{4}$|^[A-Z]{1}\d{1}[A-Z]{1}\d{1}[A-Z]{1}\d{1}$'.</Description>
					<Assertion>
						<Format Path="5[1]" Regex="^\d{5}$|^\d{5}-\d{4}$|^[A-Z]{1}\d{1}[A-Z]{1}\d{1}[A-Z]{1}\d{1}$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-067">
					<Description>The value of XAD-9 (County/Parish Code) SHALL be formatted with '^\d{5}$|^(\d{5}(-\d{4})?)$'.</Description>
					<Assertion>
						<Format Path="9[1]" Regex="^\d{5}$|^(\d{5}(-\d{4})?)$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-010">
					<Description>The value of XAD-4 (State or Province) SHALL be one of codes in ValueSet: PHVS_State_FIPS_5-2_alpha.</Description>
					<Assertion>
						<ValueSet Path="4[1]" ValueSetID="PHVS_State_FIPS_5-2_alpha" BindingStrength="R" BindingLocation="1" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="HD_ELR">
				<Constraint ID="ELR-063">
					<Description>IF [The value of HD-3 (Universal ID Type) is 'ISO'.] THEN [The value of HD-2 (Universal ID) SHALL be formatted with 'ISO-compliant OID'.]</Description>
					<Assertion>
						<IMPLY>
							<AND>
								<Presence Path="3[1]" />
								<PlainText Path="3[1]" Text="ISO" IgnoreCase="false" />
							</AND>
							<AND>
								<Presence Path="2[1]" />
								<Format Path="2[1]" Regex="[0-2](\.(0|[1-9][0-9]*))*" />
							</AND>
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-062">
					<Description>IF [The value of HD-3 (Universal ID Type) is 'CLIA'.] THEN [The value of HD-2 (Universal ID) SHALL be formatted with '^\d{2}[D]{1}\d{7}$'.]</Description>
					<Assertion>
						<IMPLY>
							<AND>
								<Presence Path="3[1]" />
								<PlainText Path="3[1]" Text="CLIA" IgnoreCase="false" />
							</AND>
							<AND>
								<Presence Path="2[1]" />
								<Format Path="2[1]" Regex="^\d{2}[D]{1}\d{7}$" />
							</AND>
						</IMPLY>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-007">
					<Description>[The value of HD-3 (Universal ID Type) SHALL be 'ISO'.] OR [The value of HD-3 (Universal ID Type) SHALL be 'CLIA'.]</Description>
					<Assertion>
						<OR>
							<AND>
								<Presence Path="3[1]" />
								<PlainText Path="3[1]" Text="ISO" IgnoreCase="false" />
							</AND>
							<AND>
								<Presence Path="3[1]" />
								<PlainText Path="3[1]" Text="CLIA" IgnoreCase="false" />
							</AND>
						</OR>
					</Assertion>
				</Constraint>
			</ByID>
		</Datatype>
		<Segment>
			<ByID ID="NK1_ELR">
				<Constraint ID="ELR-033">
					<Description>The value of NK1-1 SHALL be valued sequentially starting with the value '1'.</Description>
					<Assertion>
						<SetID Path="1[1]" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="SPM_ELR">
				<Constraint ID="ELR-054">
					<Description>The value of SPM-1 SHALL be '1'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="1" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-060">
					<Description>The value of SPM-18.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="18[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
				
				
				<Constraint ID="SPM-4Value">
					<Description>SPM-4 SHALL be a valid code for the ARLN program</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.aphl.plugin.extra.ARLN_SPM4" />
					</Assertion>
				</Constraint>
				
			</ByID>
			<ByID ID="NTE_ELR">
				<Constraint ID="ELR-053">
					<Description>The value of NTE-1 SHALL be valued sequentially starting with the value '1'.</Description>
					<Assertion>
						<SetID Path="1[1]" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="PV1_ELR">
				<Constraint ID="ELR-030">
					<Description>The value of PV1-1 SHALL be '1'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="1" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-031">
					<Description>The value of PV1-44.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="44[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-032">
					<Description>The value of PV1-45.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="45[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="ORC_ELR1">
				<Constraint ID="ELR-034">
					<Description>The value of ORC-1 SHALL be 'RE'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="RE" IgnoreCase="false" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="SPM_ARLN">
				<Constraint ID="ELR-054">
					<Description>The value of SPM-1 SHALL be '1'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="1" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-060">
					<Description>The value of SPM-18.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="18[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="MSH_ELR">
				<Constraint ID="ELR-012">
					<Description>The value of MSH-1 SHALL be '|'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="|" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-014">
					<Description>The value of MSH-7.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14})((\x2D|\x2B)\d{4})$'.</Description>
					<Assertion>
						<Format Path="7[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14})((\x2D|\x2B)\d{4})$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-015">
					<Description>The value of MSH-9.1 SHALL be 'ORU'.</Description>
					<Assertion>
						<PlainText Path="9[1].1[1]" Text="ORU" IgnoreCase="true" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-016">
					<Description>The value of MSH-9.2 SHALL be 'R01'.</Description>
					<Assertion>
						<PlainText Path="9[1].2[1]" Text="R01" IgnoreCase="true" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-017">
					<Description>The value of MSH-9.3 SHALL be 'ORU_R01'.</Description>
					<Assertion>
						<PlainText Path="9[1].3[1]" Text="ORU_R01" IgnoreCase="true" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-019">
					<Description>MSH-15 (Accept Acknowledgment Type) SHALL contain the constant value 'AL' IF any occurrence of MSH.21.1 (Entity Identifier) is 'PHLabReport-Ack', ELSE, if valued, SHALL contain the constant value 'NE'.</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_019" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-020">
					<Description>MSH-16 (Application Acknowledgement Type) SHALL contain the constant value 'AL', 'NE', 'ER', or 'SU', IF any occurrence of MSH-21.1 (Entity Identifier) is 'PHLabReport-Ack', ELSE, if valued, SHALL contain the constant value 'NE' .</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_020" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-021">
					<Description>MSH.21.1 (Entity Identifier) of an occurrence of MSH.21 (Message Profile Identifier) SHALL be valued with 'PHLabReport-Ack' OR 'PHLabReport-NoAck' OR 'PHLabReport-Batch'</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_021" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR_022">
					<Description>MSH-21.3 (Universal ID) of an occurrence of MSH.21 (Message Profile Identifier) SHALL contain the value "2.16.840.1.113883.9.11"</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_022" />
					</Assertion>
				</Constraint>
				
				
				<Constraint ID="ELR-021.1">
					<Description>One occurrence of MSH-21 SHALL be valued 'PHLabReport-NoAck^phLabResultsELRv251^2.16.840.1.113883.9.11^ISO'</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.aphl.plugin.cs.ELR_21_1"/>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="OBX_ELR">
				<Constraint ID="ELR-049">
					<Description>[The value of OBX-14.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.] OR [The value of OBX-14.1 SHALL be '0000'.]</Description>
					<Assertion>
						<OR>
							<Format Path="14[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
							<PlainText Path="14[1].1[1]" Text="0000" IgnoreCase="false" />
						</OR>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-052">
					<Description>The value of OBX-19.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="19[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
				
				<Constraint ID="ARLN_OBX">
					<Description>OBX-3, OBX-2 and OBX-5 SHALL be a valid combination for the ARLN program</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.aphl.plugin.extra.ARLN_OBX"/>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="SFT_ELR">
				<Constraint ID="ELR-023">
					<Description>The value of SFT-6.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="6[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="OBR_ELR">
				<Constraint ID="ELR-047">
					<Description>The value of OBR-22.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12})((\x2D|\x2B)\d{4})$'.</Description>
					<Assertion>
						<Format Path="22[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12})((\x2D|\x2B)\d{4})$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-041">
					<Description>[The value of OBR-7.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$'.] OR [The value of OBR-7.1 SHALL be '0000'.]</Description>
					<Assertion>
						<OR>
							<Format Path="7[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$" />
							<PlainText Path="7[1].1[1]" Text="0000" IgnoreCase="false" />
						</OR>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-043">
					<Description>[The value of OBR-8.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$'.] OR [The value of OBR-8.1 SHALL be '0000'.]</Description>
					<Assertion>
						<OR>
							<Format Path="8[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8})((\x2D|\x2B)\d{4})?$" />
							<PlainText Path="8[1].1[1]" Text="0000" IgnoreCase="false" />
						</OR>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="MSH_ELR_ARLN-1">
				<Constraint ID="ELR-012">
					<Description>The value of MSH-1 SHALL be '|'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="|" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-014">
					<Description>The value of MSH-7.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14})((\x2D|\x2B)\d{4})$'.</Description>
					<Assertion>
						<Format Path="7[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14})((\x2D|\x2B)\d{4})$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-015">
					<Description>The value of MSH-9.1 SHALL be 'ORU'.</Description>
					<Assertion>
						<PlainText Path="9[1].1[1]" Text="ORU" IgnoreCase="true" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-016">
					<Description>The value of MSH-9.2 SHALL be 'R01'.</Description>
					<Assertion>
						<PlainText Path="9[1].2[1]" Text="R01" IgnoreCase="true" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-017">
					<Description>The value of MSH-9.3 SHALL be 'ORU_R01'.</Description>
					<Assertion>
						<PlainText Path="9[1].3[1]" Text="ORU_R01" IgnoreCase="true" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-019">
					<Description>MSH-15 (Accept Acknowledgment Type) SHALL contain the constant value 'AL' IF any occurrence of MSH.21.1 (Entity Identifier) is 'PHLabReport-Ack', ELSE, if valued, SHALL contain the constant value 'NE'.</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_019" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-020">
					<Description>MSH-16 (Application Acknowledgement Type) SHALL contain the constant value 'AL', 'NE', 'ER', or 'SU', IF any occurrence of MSH-21.1 (Entity Identifier) is 'PHLabReport-Ack', ELSE, if valued, SHALL contain the constant value 'NE' .</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_020" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-021">
					<Description>MSH.21.1 (Entity Identifier) of an occurrence of MSH.21 (Message Profile Identifier) SHALL be valued with 'PHLabReport-Ack' OR 'PHLabReport-NoAck' OR 'PHLabReport-Batch'</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_021" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR_022">
					<Description>MSH-21.3 (Universal ID) of an occurrence of MSH.21 (Message Profile Identifier) SHALL contain the value "2.16.840.1.113883.9.11"</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_022" />
					</Assertion>
				</Constraint>
				<Constraint ID="ARLN-21">
					<Description>One occurrence of MSH-21 SHALL be valued 'PHLabReport-NoAck^phLabResultsELRv251^2.16.840.1.113883.9.11^ISO'</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.aphl.plugin.cs.ARLN_21" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="PID_ELR">
				<Constraint ID="ELR-024">
					<Description>The value of PID-1 SHALL be '1'.</Description>
					<Assertion>
						<PlainText Path="1[1]" Text="1" IgnoreCase="false" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-026">
					<Description>The value of PID-7.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="7[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-028">
					<Description>The value of PID-29.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="29[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-029">
					<Description>The value of PID-33.1 SHALL be formatted with '^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$'.</Description>
					<Assertion>
						<Format Path="33[1].1[1]" Regex="^(\d{14}\.\d{1,4}|\d{14}|\d{12}|\d{10}|\d{8}|\d{6}|\d{4})((\x2D|\x2B)\d{4})?$" />
					</Assertion>
				</Constraint>
			</ByID>
		</Segment>
		<Group>
			<ByID ID="5d55ad6e84aeb5b33d97ed47">
				<Constraint ID="ELR-048">
					<Description>The value of OBX.1 (Set ID - OBX) SHALL be valued sequentially starting with the value '1'.</Description>
					<Assertion>
						<SetID Path="1[1].1[1]" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d55ad6e84aeb5b33d97e803">
				<Constraint ID="ELR-048">
					<Description>The value of OBX.1 (Set ID - OBX) SHALL be valued sequentially starting with the value '1'.</Description>
					<Assertion>
						<SetID Path="1[1].1[1]" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d1a220684ae07947e946d35">
				<Constraint ID="ELR-048">
					<Description>The value of OBX.1 (Set ID - OBX) SHALL be valued sequentially starting with the value '1'.</Description>
					<Assertion>
						<SetID Path="1[1].1[1]" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d55ad6e84aeb5b33d97ed4e">
				<Constraint ID="ELR-037-o">
					<Description>FORALL[The value of ORC.12[*].1 (ID Number) SHALL be equal to the value of OBR.16[*].1 (ID Number).][The value of ORC.12[*].2.1 (Surname) SHALL be equal to the value of OBR.16[*].2.1 (Surname).][The value of ORC.12[*].3 (Given Name) SHALL be equal to the value of OBR.16[*].3 (Given Name).][The value of ORC.12[*].4 (Second and Further Given Names or Initials Thereof) SHALL be equal to the value of OBR.16[*].4 (Second and Further Given Names or Initials Thereof).][The value of ORC.12[*].5 (Suffix (e.g., JR or III)) SHALL be equal to the value of OBR.16[*].5 (Suffix (e.g., JR or III)).][The value of ORC.12[*].6 (Prefix (e.g., DR)) SHALL be equal to the value of OBR.16[*].6 (Prefix (e.g., DR)).][The value of ORC.12[*].9.1 (Namespace ID) SHALL be equal to the value of OBR.16[*].9.1 (Namespace ID).][The value of ORC.12[*].9.2 (Universal ID) SHALL be equal to the value of OBR.16[*].9.2 (Universal ID).][The value of ORC.12[*].9.3 (Universal ID Type) SHALL be equal to the value of OBR.16[*].9.3 (Universal ID Type).][The value of ORC.12[*].10 (Name Type Code) SHALL be equal to the value of OBR.16[*].10 (Name Type Code).][The value of ORC.12[*].13 (Identifier Type Code) SHALL be equal to the value of OBR.16[*].13 (Identifier Type Code).][The value of ORC.12[*].14.1 (Namespace ID) SHALL be equal to the value of OBR.16[*].14.1 (Namespace ID).][The value of ORC.12[*].14.2 (Universal ID) SHALL be equal to the value of OBR.16[*].14.2 (Universal ID).][The value of ORC.12[*].14.3 (Universal ID Type) SHALL be equal to the value of OBR.16[*].14.3 (Universal ID Type).][The value of ORC.12[*].21 (Professional Suffix) SHALL be equal to the value of OBR.16[*].21 (Professional Suffix).]</Description>
					<Assertion>
						<FORALL>
							<AND>
								<Presence Path="1[1].12[*].1[1]" />
								<PathValue Path1="1[1].12[*].1[1]" Operator="EQ" Path2="2[1].16[*].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].2[1].1[1]" />
								<PathValue Path1="1[1].12[*].2[1].1[1]" Operator="EQ" Path2="2[1].16[*].2[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].3[1]" />
								<PathValue Path1="1[1].12[*].3[1]" Operator="EQ" Path2="2[1].16[*].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].4[1]" />
								<PathValue Path1="1[1].12[*].4[1]" Operator="EQ" Path2="2[1].16[*].4[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].5[1]" />
								<PathValue Path1="1[1].12[*].5[1]" Operator="EQ" Path2="2[1].16[*].5[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].6[1]" />
								<PathValue Path1="1[1].12[*].6[1]" Operator="EQ" Path2="2[1].16[*].6[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].1[1]" />
								<PathValue Path1="1[1].12[*].9[1].1[1]" Operator="EQ" Path2="2[1].16[*].9[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].2[1]" />
								<PathValue Path1="1[1].12[*].9[1].2[1]" Operator="EQ" Path2="2[1].16[*].9[1].2[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].3[1]" />
								<PathValue Path1="1[1].12[*].9[1].3[1]" Operator="EQ" Path2="2[1].16[*].9[1].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].10[1]" />
								<PathValue Path1="1[1].12[*].10[1]" Operator="EQ" Path2="2[1].16[*].10[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].13[1]" />
								<PathValue Path1="1[1].12[*].13[1]" Operator="EQ" Path2="2[1].16[*].13[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].1[1]" />
								<PathValue Path1="1[1].12[*].14[1].1[1]" Operator="EQ" Path2="2[1].16[*].14[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].2[1]" />
								<PathValue Path1="1[1].12[*].14[1].2[1]" Operator="EQ" Path2="2[1].16[*].14[1].2[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].3[1]" />
								<PathValue Path1="1[1].12[*].14[1].3[1]" Operator="EQ" Path2="2[1].16[*].14[1].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].21[1]" />
								<PathValue Path1="1[1].12[*].21[1]" Operator="EQ" Path2="2[1].16[*].21[1]" />
							</AND>
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-035">
					<Description>FORALL[The value of ORC.2.1 (Entity Identifier) SHALL be equal to the value of OBR.2.1 (Entity Identifier).][The value of ORC.2.2 (Namespace ID) SHALL be equal to the value of OBR.2.2 (Namespace ID).][The value of ORC.2.3 (Universal ID) SHALL be equal to the value of OBR.2.3 (Universal ID).][The value of ORC.2.4 (Universal ID Type) SHALL be equal to the value of OBR.2.4 (Universal ID Type).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].2[1].1[1]" Operator="EQ" Path2="2[1].2[1].1[1]" />
							<PathValue Path1="1[1].2[1].2[1]" Operator="EQ" Path2="2[1].2[1].2[1]" />
							<PathValue Path1="1[1].2[1].3[1]" Operator="EQ" Path2="2[1].2[1].3[1]" />
							<PathValue Path1="1[1].2[1].4[1]" Operator="EQ" Path2="2[1].2[1].4[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-036">
					<Description>FORALL[The value of ORC.3.1 (Entity Identifier) SHALL be equal to the value of OBR.3.1 (Entity Identifier).][The value of ORC.3.2 (Namespace ID) SHALL be equal to the value of OBR.3.2 (Namespace ID).][The value of ORC.3.3 (Universal ID) SHALL be equal to the value of OBR.3.3 (Universal ID).][The value of ORC.3.4 (Universal ID Type) SHALL be equal to the value of OBR.3.4 (Universal ID Type).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].3[1].1[1]" Operator="EQ" Path2="2[1].3[1].1[1]" />
							<PathValue Path1="1[1].3[1].2[1]" Operator="EQ" Path2="2[1].3[1].2[1]" />
							<PathValue Path1="1[1].3[1].3[1]" Operator="EQ" Path2="2[1].3[1].3[1]" />
							<PathValue Path1="1[1].3[1].4[1]" Operator="EQ" Path2="2[1].3[1].4[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-038">
					<Description>FORALL[The value of ORC.14[*].2 (Telecommunication Use Code) SHALL be equal to the value of OBR.17[*].2 (Telecommunication Use Code).][The value of ORC.14[*].3 (Telecommunication Equipment Type) SHALL be equal to the value of OBR.17[*].3 (Telecommunication Equipment Type).][The value of ORC.14[*].4 (Email Address) SHALL be equal to the value of OBR.17[*].4 (Email Address).][The value of ORC.14[*].5 (Country Code) SHALL be equal to the value of OBR.17[*].5 (Country Code).][The value of ORC.14[*].6 (Area/City Code) SHALL be equal to the value of OBR.17[*].6 (Area/City Code).][The value of ORC.14[*].7 (Local Number) SHALL be equal to the value of OBR.17[*].7 (Local Number).][The value of ORC.14[*].8 (Extension) SHALL be equal to the value of OBR.17[*].8 (Extension).][The value of ORC.14[*].9 (Any Text) SHALL be equal to the value of OBR.17[*].9 (Any Text).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].14[*].2[1]" Operator="EQ" Path2="2[1].17[*].2[1]" />
							<PathValue Path1="1[1].14[*].3[1]" Operator="EQ" Path2="2[1].17[*].3[1]" />
							<PathValue Path1="1[1].14[*].4[1]" Operator="EQ" Path2="2[1].17[*].4[1]" />
							<PathValue Path1="1[1].14[*].5[1]" Operator="EQ" Path2="2[1].17[*].5[1]" />
							<PathValue Path1="1[1].14[*].6[1]" Operator="EQ" Path2="2[1].17[*].6[1]" />
							<PathValue Path1="1[1].14[*].7[1]" Operator="EQ" Path2="2[1].17[*].7[1]" />
							<PathValue Path1="1[1].14[*].8[1]" Operator="EQ" Path2="2[1].17[*].8[1]" />
							<PathValue Path1="1[1].14[*].9[1]" Operator="EQ" Path2="2[1].17[*].9[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="OBX3_OBR4">
					<Description>OBX-3 SHALL be a valid code for the PHLIP progam</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.aphl.plugin.extra.PHLIP_OBX3_OBR4" />
					</Assertion>
				</Constraint>
				<Constraint ID="OBX3_OBR4_Warning">
					<Description>OBX-3 and OBR-4 SHOULD be a valid combination for the PHLIP program</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.aphl.plugin.extra.PHLIP_OBX3_OBR4_Warning" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d55ad6e84aeb5b33d97e80a">
				<Constraint ID="ELR-037-o">
					<Description>FORALL[The value of ORC.12[*].1 (ID Number) SHALL be equal to the value of OBR.16[*].1 (ID Number).][The value of ORC.12[*].2.1 (Surname) SHALL be equal to the value of OBR.16[*].2.1 (Surname).][The value of ORC.12[*].3 (Given Name) SHALL be equal to the value of OBR.16[*].3 (Given Name).][The value of ORC.12[*].4 (Second and Further Given Names or Initials Thereof) SHALL be equal to the value of OBR.16[*].4 (Second and Further Given Names or Initials Thereof).][The value of ORC.12[*].5 (Suffix (e.g., JR or III)) SHALL be equal to the value of OBR.16[*].5 (Suffix (e.g., JR or III)).][The value of ORC.12[*].6 (Prefix (e.g., DR)) SHALL be equal to the value of OBR.16[*].6 (Prefix (e.g., DR)).][The value of ORC.12[*].9.1 (Namespace ID) SHALL be equal to the value of OBR.16[*].9.1 (Namespace ID).][The value of ORC.12[*].9.2 (Universal ID) SHALL be equal to the value of OBR.16[*].9.2 (Universal ID).][The value of ORC.12[*].9.3 (Universal ID Type) SHALL be equal to the value of OBR.16[*].9.3 (Universal ID Type).][The value of ORC.12[*].10 (Name Type Code) SHALL be equal to the value of OBR.16[*].10 (Name Type Code).][The value of ORC.12[*].13 (Identifier Type Code) SHALL be equal to the value of OBR.16[*].13 (Identifier Type Code).][The value of ORC.12[*].14.1 (Namespace ID) SHALL be equal to the value of OBR.16[*].14.1 (Namespace ID).][The value of ORC.12[*].14.2 (Universal ID) SHALL be equal to the value of OBR.16[*].14.2 (Universal ID).][The value of ORC.12[*].14.3 (Universal ID Type) SHALL be equal to the value of OBR.16[*].14.3 (Universal ID Type).][The value of ORC.12[*].21 (Professional Suffix) SHALL be equal to the value of OBR.16[*].21 (Professional Suffix).]</Description>
					<Assertion>
						<FORALL>
							<AND>
								<Presence Path="1[1].12[*].1[1]" />
								<PathValue Path1="1[1].12[*].1[1]" Operator="EQ" Path2="2[1].16[*].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].2[1].1[1]" />
								<PathValue Path1="1[1].12[*].2[1].1[1]" Operator="EQ" Path2="2[1].16[*].2[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].3[1]" />
								<PathValue Path1="1[1].12[*].3[1]" Operator="EQ" Path2="2[1].16[*].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].4[1]" />
								<PathValue Path1="1[1].12[*].4[1]" Operator="EQ" Path2="2[1].16[*].4[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].5[1]" />
								<PathValue Path1="1[1].12[*].5[1]" Operator="EQ" Path2="2[1].16[*].5[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].6[1]" />
								<PathValue Path1="1[1].12[*].6[1]" Operator="EQ" Path2="2[1].16[*].6[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].1[1]" />
								<PathValue Path1="1[1].12[*].9[1].1[1]" Operator="EQ" Path2="2[1].16[*].9[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].2[1]" />
								<PathValue Path1="1[1].12[*].9[1].2[1]" Operator="EQ" Path2="2[1].16[*].9[1].2[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].3[1]" />
								<PathValue Path1="1[1].12[*].9[1].3[1]" Operator="EQ" Path2="2[1].16[*].9[1].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].10[1]" />
								<PathValue Path1="1[1].12[*].10[1]" Operator="EQ" Path2="2[1].16[*].10[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].13[1]" />
								<PathValue Path1="1[1].12[*].13[1]" Operator="EQ" Path2="2[1].16[*].13[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].1[1]" />
								<PathValue Path1="1[1].12[*].14[1].1[1]" Operator="EQ" Path2="2[1].16[*].14[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].2[1]" />
								<PathValue Path1="1[1].12[*].14[1].2[1]" Operator="EQ" Path2="2[1].16[*].14[1].2[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].3[1]" />
								<PathValue Path1="1[1].12[*].14[1].3[1]" Operator="EQ" Path2="2[1].16[*].14[1].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].21[1]" />
								<PathValue Path1="1[1].12[*].21[1]" Operator="EQ" Path2="2[1].16[*].21[1]" />
							</AND>
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-035">
					<Description>FORALL[The value of ORC.2.1 (Entity Identifier) SHALL be equal to the value of OBR.2.1 (Entity Identifier).][The value of ORC.2.2 (Namespace ID) SHALL be equal to the value of OBR.2.2 (Namespace ID).][The value of ORC.2.3 (Universal ID) SHALL be equal to the value of OBR.2.3 (Universal ID).][The value of ORC.2.4 (Universal ID Type) SHALL be equal to the value of OBR.2.4 (Universal ID Type).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].2[1].1[1]" Operator="EQ" Path2="2[1].2[1].1[1]" />
							<PathValue Path1="1[1].2[1].2[1]" Operator="EQ" Path2="2[1].2[1].2[1]" />
							<PathValue Path1="1[1].2[1].3[1]" Operator="EQ" Path2="2[1].2[1].3[1]" />
							<PathValue Path1="1[1].2[1].4[1]" Operator="EQ" Path2="2[1].2[1].4[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-036">
					<Description>FORALL[The value of ORC.3.1 (Entity Identifier) SHALL be equal to the value of OBR.3.1 (Entity Identifier).][The value of ORC.3.2 (Namespace ID) SHALL be equal to the value of OBR.3.2 (Namespace ID).][The value of ORC.3.3 (Universal ID) SHALL be equal to the value of OBR.3.3 (Universal ID).][The value of ORC.3.4 (Universal ID Type) SHALL be equal to the value of OBR.3.4 (Universal ID Type).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].3[1].1[1]" Operator="EQ" Path2="2[1].3[1].1[1]" />
							<PathValue Path1="1[1].3[1].2[1]" Operator="EQ" Path2="2[1].3[1].2[1]" />
							<PathValue Path1="1[1].3[1].3[1]" Operator="EQ" Path2="2[1].3[1].3[1]" />
							<PathValue Path1="1[1].3[1].4[1]" Operator="EQ" Path2="2[1].3[1].4[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-038">
					<Description>FORALL[The value of ORC.14[*].2 (Telecommunication Use Code) SHALL be equal to the value of OBR.17[*].2 (Telecommunication Use Code).][The value of ORC.14[*].3 (Telecommunication Equipment Type) SHALL be equal to the value of OBR.17[*].3 (Telecommunication Equipment Type).][The value of ORC.14[*].4 (Email Address) SHALL be equal to the value of OBR.17[*].4 (Email Address).][The value of ORC.14[*].5 (Country Code) SHALL be equal to the value of OBR.17[*].5 (Country Code).][The value of ORC.14[*].6 (Area/City Code) SHALL be equal to the value of OBR.17[*].6 (Area/City Code).][The value of ORC.14[*].7 (Local Number) SHALL be equal to the value of OBR.17[*].7 (Local Number).][The value of ORC.14[*].8 (Extension) SHALL be equal to the value of OBR.17[*].8 (Extension).][The value of ORC.14[*].9 (Any Text) SHALL be equal to the value of OBR.17[*].9 (Any Text).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].14[*].2[1]" Operator="EQ" Path2="2[1].17[*].2[1]" />
							<PathValue Path1="1[1].14[*].3[1]" Operator="EQ" Path2="2[1].17[*].3[1]" />
							<PathValue Path1="1[1].14[*].4[1]" Operator="EQ" Path2="2[1].17[*].4[1]" />
							<PathValue Path1="1[1].14[*].5[1]" Operator="EQ" Path2="2[1].17[*].5[1]" />
							<PathValue Path1="1[1].14[*].6[1]" Operator="EQ" Path2="2[1].17[*].6[1]" />
							<PathValue Path1="1[1].14[*].7[1]" Operator="EQ" Path2="2[1].17[*].7[1]" />
							<PathValue Path1="1[1].14[*].8[1]" Operator="EQ" Path2="2[1].17[*].8[1]" />
							<PathValue Path1="1[1].14[*].9[1]" Operator="EQ" Path2="2[1].17[*].9[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d1a220684ae07947e946d3c">
				<Constraint ID="ELR-037-o">
					<Description>FORALL[The value of ORC.12[*].1 (ID Number) SHALL be equal to the value of OBR.16[*].1 (ID Number).][The value of ORC.12[*].2.1 (Surname) SHALL be equal to the value of OBR.16[*].2.1 (Surname).][The value of ORC.12[*].3 (Given Name) SHALL be equal to the value of OBR.16[*].3 (Given Name).][The value of ORC.12[*].4 (Second and Further Given Names or Initials Thereof) SHALL be equal to the value of OBR.16[*].4 (Second and Further Given Names or Initials Thereof).][The value of ORC.12[*].5 (Suffix (e.g., JR or III)) SHALL be equal to the value of OBR.16[*].5 (Suffix (e.g., JR or III)).][The value of ORC.12[*].6 (Prefix (e.g., DR)) SHALL be equal to the value of OBR.16[*].6 (Prefix (e.g., DR)).][The value of ORC.12[*].9.1 (Namespace ID) SHALL be equal to the value of OBR.16[*].9.1 (Namespace ID).][The value of ORC.12[*].9.2 (Universal ID) SHALL be equal to the value of OBR.16[*].9.2 (Universal ID).][The value of ORC.12[*].9.3 (Universal ID Type) SHALL be equal to the value of OBR.16[*].9.3 (Universal ID Type).][The value of ORC.12[*].10 (Name Type Code) SHALL be equal to the value of OBR.16[*].10 (Name Type Code).][The value of ORC.12[*].13 (Identifier Type Code) SHALL be equal to the value of OBR.16[*].13 (Identifier Type Code).][The value of ORC.12[*].14.1 (Namespace ID) SHALL be equal to the value of OBR.16[*].14.1 (Namespace ID).][The value of ORC.12[*].14.2 (Universal ID) SHALL be equal to the value of OBR.16[*].14.2 (Universal ID).][The value of ORC.12[*].14.3 (Universal ID Type) SHALL be equal to the value of OBR.16[*].14.3 (Universal ID Type).][The value of ORC.12[*].21 (Professional Suffix) SHALL be equal to the value of OBR.16[*].21 (Professional Suffix).]</Description>
					<Assertion>
						<FORALL>
							<AND>
								<Presence Path="1[1].12[*].1[1]" />
								<PathValue Path1="1[1].12[*].1[1]" Operator="EQ" Path2="2[1].16[*].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].2[1].1[1]" />
								<PathValue Path1="1[1].12[*].2[1].1[1]" Operator="EQ" Path2="2[1].16[*].2[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].3[1]" />
								<PathValue Path1="1[1].12[*].3[1]" Operator="EQ" Path2="2[1].16[*].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].4[1]" />
								<PathValue Path1="1[1].12[*].4[1]" Operator="EQ" Path2="2[1].16[*].4[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].5[1]" />
								<PathValue Path1="1[1].12[*].5[1]" Operator="EQ" Path2="2[1].16[*].5[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].6[1]" />
								<PathValue Path1="1[1].12[*].6[1]" Operator="EQ" Path2="2[1].16[*].6[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].1[1]" />
								<PathValue Path1="1[1].12[*].9[1].1[1]" Operator="EQ" Path2="2[1].16[*].9[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].2[1]" />
								<PathValue Path1="1[1].12[*].9[1].2[1]" Operator="EQ" Path2="2[1].16[*].9[1].2[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].9[1].3[1]" />
								<PathValue Path1="1[1].12[*].9[1].3[1]" Operator="EQ" Path2="2[1].16[*].9[1].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].10[1]" />
								<PathValue Path1="1[1].12[*].10[1]" Operator="EQ" Path2="2[1].16[*].10[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].13[1]" />
								<PathValue Path1="1[1].12[*].13[1]" Operator="EQ" Path2="2[1].16[*].13[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].1[1]" />
								<PathValue Path1="1[1].12[*].14[1].1[1]" Operator="EQ" Path2="2[1].16[*].14[1].1[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].2[1]" />
								<PathValue Path1="1[1].12[*].14[1].2[1]" Operator="EQ" Path2="2[1].16[*].14[1].2[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].14[1].3[1]" />
								<PathValue Path1="1[1].12[*].14[1].3[1]" Operator="EQ" Path2="2[1].16[*].14[1].3[1]" />
							</AND>
							<AND>
								<Presence Path="1[1].12[*].21[1]" />
								<PathValue Path1="1[1].12[*].21[1]" Operator="EQ" Path2="2[1].16[*].21[1]" />
							</AND>
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-035">
					<Description>FORALL[The value of ORC.2.1 (Entity Identifier) SHALL be equal to the value of OBR.2.1 (Entity Identifier).][The value of ORC.2.2 (Namespace ID) SHALL be equal to the value of OBR.2.2 (Namespace ID).][The value of ORC.2.3 (Universal ID) SHALL be equal to the value of OBR.2.3 (Universal ID).][The value of ORC.2.4 (Universal ID Type) SHALL be equal to the value of OBR.2.4 (Universal ID Type).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].2[1].1[1]" Operator="EQ" Path2="2[1].2[1].1[1]" />
							<PathValue Path1="1[1].2[1].2[1]" Operator="EQ" Path2="2[1].2[1].2[1]" />
							<PathValue Path1="1[1].2[1].3[1]" Operator="EQ" Path2="2[1].2[1].3[1]" />
							<PathValue Path1="1[1].2[1].4[1]" Operator="EQ" Path2="2[1].2[1].4[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-036">
					<Description>FORALL[The value of ORC.3.1 (Entity Identifier) SHALL be equal to the value of OBR.3.1 (Entity Identifier).][The value of ORC.3.2 (Namespace ID) SHALL be equal to the value of OBR.3.2 (Namespace ID).][The value of ORC.3.3 (Universal ID) SHALL be equal to the value of OBR.3.3 (Universal ID).][The value of ORC.3.4 (Universal ID Type) SHALL be equal to the value of OBR.3.4 (Universal ID Type).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].3[1].1[1]" Operator="EQ" Path2="2[1].3[1].1[1]" />
							<PathValue Path1="1[1].3[1].2[1]" Operator="EQ" Path2="2[1].3[1].2[1]" />
							<PathValue Path1="1[1].3[1].3[1]" Operator="EQ" Path2="2[1].3[1].3[1]" />
							<PathValue Path1="1[1].3[1].4[1]" Operator="EQ" Path2="2[1].3[1].4[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
				<Constraint ID="ELR-038">
					<Description>FORALL[The value of ORC.14[*].2 (Telecommunication Use Code) SHALL be equal to the value of OBR.17[*].2 (Telecommunication Use Code).][The value of ORC.14[*].3 (Telecommunication Equipment Type) SHALL be equal to the value of OBR.17[*].3 (Telecommunication Equipment Type).][The value of ORC.14[*].4 (Email Address) SHALL be equal to the value of OBR.17[*].4 (Email Address).][The value of ORC.14[*].5 (Country Code) SHALL be equal to the value of OBR.17[*].5 (Country Code).][The value of ORC.14[*].6 (Area/City Code) SHALL be equal to the value of OBR.17[*].6 (Area/City Code).][The value of ORC.14[*].7 (Local Number) SHALL be equal to the value of OBR.17[*].7 (Local Number).][The value of ORC.14[*].8 (Extension) SHALL be equal to the value of OBR.17[*].8 (Extension).][The value of ORC.14[*].9 (Any Text) SHALL be equal to the value of OBR.17[*].9 (Any Text).]</Description>
					<Assertion>
						<FORALL>
							<PathValue Path1="1[1].14[*].2[1]" Operator="EQ" Path2="2[1].17[*].2[1]" />
							<PathValue Path1="1[1].14[*].3[1]" Operator="EQ" Path2="2[1].17[*].3[1]" />
							<PathValue Path1="1[1].14[*].4[1]" Operator="EQ" Path2="2[1].17[*].4[1]" />
							<PathValue Path1="1[1].14[*].5[1]" Operator="EQ" Path2="2[1].17[*].5[1]" />
							<PathValue Path1="1[1].14[*].6[1]" Operator="EQ" Path2="2[1].17[*].6[1]" />
							<PathValue Path1="1[1].14[*].7[1]" Operator="EQ" Path2="2[1].17[*].7[1]" />
							<PathValue Path1="1[1].14[*].8[1]" Operator="EQ" Path2="2[1].17[*].8[1]" />
							<PathValue Path1="1[1].14[*].9[1]" Operator="EQ" Path2="2[1].17[*].9[1]" />
						</FORALL>
					</Assertion>
				</Constraint>
			</ByID>
		</Group>
		<Message>
			<ByID ID="5d52faf184aeb5b33d8a5bf0">
				<Constraint ID="ELR-040">
					<Description>OBR-3 (Filler Order Number) SHALL NOT contain the same value as another occurrence of OBR-3 (Filler Order Number) in the message.</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_040" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d52faf184aeb5b33d8a5db2">
				<Constraint ID="ELR-040">
					<Description>OBR-3 (Filler Order Number) SHALL NOT contain the same value as another occurrence of OBR-3 (Filler Order Number) in the message.</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_040" />
					</Assertion>
				</Constraint>
			</ByID>
			<ByID ID="5d557ed577493e608b838fa8">
				<Constraint ID="ELR-040">
					<Description>OBR-3 (Filler Order Number) SHALL NOT contain the same value as another occurrence of OBR-3 (Filler Order Number) in the message.</Description>
					<Assertion>
						<Plugin QualifiedClassName="gov.nist.hit.elr.plugin.cs.ELR_040" />
					</Assertion>
				</Constraint>
			</ByID>
		</Message>
	</Constraints>
</ConformanceContext>